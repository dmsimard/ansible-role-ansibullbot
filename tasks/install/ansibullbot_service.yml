- name: SERVICE | Create initial log file
  copy:
    force: no
    dest: "{{ ansibullbot_log_path }}"
    content: ''
    owner: "{{ ansibullbot_user }}"
    group: "{{ ansibullbot_group }}"
  tags:
    - ansibullbot
    - ansibullbot_logs
    - ansibullbot_service

- name: SERVICE | Setup log rotation
  template:
    src: logrotate_ansibullbot.j2
    dest: /etc/logrotate.d/ansibullbot
  tags:
    - ansibullbot
    - ansibullbot_logs

- name: SERVICE | Create cron job to cleanup Shippable cache
  cron:
    cron_file: ansibullbot
    hour: '03'
    minute: '11'
    user: "{{ ansibullbot_user }}"
    name: Cleanup Shippable cache
    job: find {{ ansibullbot_cache_dir }} -type f -atime +{{ ansibullbot_cache_days_to_keep }} -exec rm -f '{}' ';'
  tags:
    - ansibullbot
    - ansibullbot_cache
    - ansibullbot_cron

- name: SERVICE | Create cron job to generate issues by file
  cron:
    cron_file: ansibullbot
    minute: '0'
    hour: '*/3'
    user: "{{ ansibullbot_user }}"
    name: Generate issues by file
    job: 'cd {{ ansibullbot_clone_path }}; PYTHONPATH=. python scripts/generate_issues_by_file.py {{ caddy_root }}/ansibot/html/metadata'
  tags:
    - ansibullbot
    - ansibullbot_cron

- name: SERVICE | Copy ansibullbot service file
  template:
    src: systemd_ansibullbot.j2
    dest: /etc/systemd/system/ansibullbot.service
    owner: root
    group: root
    mode: '0644'
  notify: restart ansibullbot
  register: ansibullbot_service_unit_file
  tags:
    - ansibullbot
    - ansibullbot_service
    - ansibullbot_update

- name: SERVICE | SystemD daemon reload
  systemd:
    daemon_reload: yes
  when: ansibullbot_service_unit_file is changed
  tags:
    - ansibullbot
    - ansibullbot_service
    - ansibullbot_update

- name: SERVICE | Start and enable ansibullbot
  systemd:
    name: ansibullbot
    daemon_reload: yes
    enabled: yes
    state: started
  tags:
    - ansibullbot
    - ansibullbot_service
    - notest
